import psycopg2
import random
from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup
from psycopg import (
    create_db,
    new_user,
    search_words,
    adding_word,
    del_word,
    true_answer,
)
from config import (
    db_name,
    login,
    password,
    token_bot,
)

try:
    conn = psycopg2.connect(database=db_name, user=login, password=password)
except psycopg2.OperationalError as e:
    print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    exit(1)

try:
    with conn.cursor() as cur:
        create_db(cur)
        print("Start telegram bot...")

        state_storage = StateMemoryStorage()
        bot = TeleBot(token_bot, state_storage=state_storage)

        known_users = []
        buttons = []

        def show_hint(*lines):
            """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≤ –æ–¥–Ω—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–µ."""
            return "\n".join(lines)

        def show_target(data):
            """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Ü–µ–ª–µ–≤—ã–º –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–º —Å–ª–æ–≤–∞."""
            return f"{data['target_word']} -> {data['translate_word']}"

        class Command:
            """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞."""

            ADD_WORD = "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï"
            DELETE_WORD = "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô"
            NEXT = "–î–∞–ª—å—à–µ ‚è≠"

        class MyStates(StatesGroup):
            """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –±–æ—Ç–∞."""

            target_word = State()
            translate_word = State()
            another_words = State()

        @bot.message_handler(commands=["cards", "start"])
        def create_cards(message):
            """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
            cid = message.chat.id
            if cid not in known_users:
                known_users.append(cid)
                try:
                    new_user(cur, cid)
                except Exception as e:
                    bot.send_message(cid, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                    return
                bot.send_message(
                    cid,
                    "\n".join(
                        ["–ü—Ä–∏–≤–µ—Ç üññ", "–î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.üëá"]
                    ),
                )
            markup = types.ReplyKeyboardMarkup(row_width=2)
            buttons = []
            try:
                words = search_words(cur, cid)
            except Exception as e:
                bot.send_message(cid, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–ª–æ–≤: {e}")
                return

            if not words:
                bot.send_message(cid, "–°–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return

            random.shuffle(words)
            target_word = words[0][1]
            translate = words[0][0]
            target_word_btn = types.KeyboardButton(target_word)
            buttons.append(target_word_btn)

            others = [i[1] for i in words[1:4]]
            other_words_btns = [types.KeyboardButton(word) for word in others]
            buttons.extend(other_words_btns)
            random.shuffle(buttons)

            next_btn = types.KeyboardButton(Command.NEXT)
            add_word_btn = types.KeyboardButton(Command.ADD_WORD)
            delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
            buttons.extend([next_btn, add_word_btn, delete_word_btn])
            markup.add(*buttons)

            greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {translate}"
            bot.send_message(message.chat.id, greeting, reply_markup=markup)
            bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data["target_word"] = target_word
                data["translate_word"] = translate
                data["other_words"] = others

        @bot.message_handler(func=lambda message: message.text == Command.NEXT)
        def next_cards(message):
            """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ."""
            create_cards(message)

        @bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
        def delete_word(message):
            """–£–¥–∞–ª—è–µ—Ç —Å–ª–æ–≤–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
            cid = message.chat.id
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                try:
                    del_word(cur, cid, data["target_word"], data["translate_word"])
                    bot.send_message(
                        chat_id=message.chat.id,
                        text=f"–°–ª–æ–≤–æ {data['translate_word']} —É–¥–∞–ª–µ–Ω–æ",
                    )
                except Exception as e:
                    bot.send_message(
                        chat_id=message.chat.id, text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}"
                    )

        @bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
        def enter_target_word(message: types.Message):
            """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
            bot.send_message(
                chat_id=message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ"
            )
            bot.register_next_step_handler(message, enter_translate)

        def enter_translate(message: types.Message):
            """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data["target_word"] = message.text
            bot.send_message(chat_id=message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥")
            bot.register_next_step_handler(message, add_word)

        def add_word(message: types.Message):
            """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
            cid = message.chat.id
            user_id = message.from_user.id
            with bot.retrieve_data(user_id, cid) as data:
                try:
                    existing_translations = search_words(cur, user_id)
                    if message.text in [word[0] for word in existing_translations]:
                        bot.send_message(chat_id=cid, text="–°–ª–æ–≤–æ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
                    else:
                        data["translate_word"] = message.text
                        adding_word(
                            cur, user_id, data["target_word"], data["translate_word"]
                        )
                        bot.send_message(
                            chat_id=cid, text="–°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ /start"
                        )
                except Exception as e:
                    bot.send_message(
                        chat_id=cid, text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}"
                    )

        @bot.message_handler(func=lambda message: True, content_types=["text"])
        def message_reply(message):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
            cid = message.chat.id
            buttons = []
            text = message.text
            markup = types.ReplyKeyboardMarkup(row_width=2)
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                target_word = data["target_word"]
                try:
                    if text == target_word:
                        hint = show_target(data)
                        hint_text = ["–û—Ç–ª–∏—á–Ω–æ!‚ù§", hint]
                        next_btn = types.KeyboardButton(Command.NEXT)
                        add_word_btn = types.KeyboardButton(Command.ADD_WORD)
                        delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
                        buttons.extend([next_btn, add_word_btn, delete_word_btn])
                        hint = show_hint(*hint_text)
                        true_answer(
                            cur, cid, data["target_word"], data["translate_word"]
                        )
                    else:
                        hint = show_hint(
                            "–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!ü§î",
                            f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ üá∑üá∫{data['translate_word']}",
                        )
                except Exception as e:
                    hint = f"–û—à–∏–±–∫–∞: {e}"

            markup.add(*buttons)
            bot.send_message(message.chat.id, hint, reply_markup=markup)

        bot.add_custom_filter(custom_filters.StateFilter(bot))
        bot.infinity_polling(skip_pending=True)

        conn.commit()

except Exception as e:
    print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

finally:
    conn.close()
